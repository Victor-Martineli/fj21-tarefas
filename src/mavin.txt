https://anotepad.com/notes/7tyisy42




<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <title>Adiciona contato</title>
</head>
<body>
<form method="post" action="sistema?logica=AdicionaContato">
    Nome: <input type="text" name="nome"/><br/>
    E-mail: <input type="text" name="email"/><br/>
    Endere√ßo: <input type="text" name="endereco"/><br/>
    Data Nascimento: <input type="text" name="dataNascimento"/><br/>
    <input type="submit" value="Gravar"/>
</form>
</body>
</html>






package edu.undf.undfjakartaee;

import dao.Contato;
import dao.ContatoDAO;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

@WebServlet("/sistema")
public class SistemaTodoServlet extends HttpServlet {

    protected void service(HttpServletRequest request,
                           HttpServletResponse response) throws ServletException, IOException {

        String acao = request.getParameter("logica");
        ContatoDAO dao = new ContatoDAO();

        if (acao.equals("AdicionaContato")) {

            String nome = request.getParameter("nome");
            String endereco = request.getParameter("endereco");
            String email = request.getParameter("email");
            String dataEmTexto = request.getParameter("dataNascimento");
            LocalDate dataNascimento = null;

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            dataNascimento = LocalDate.parse(dataEmTexto, formatter);

            Contato contato = new Contato();
            contato.setNome(nome);
            contato.setEndereco(endereco);
            contato.setEmail(email);
            contato.setDataNascimento(dataNascimento);
            dao.inserir(contato);

            request.setAttribute("contato", contato);
            RequestDispatcher rd =
                    request.getRequestDispatcher("/contato-adicionado.jsp");

            rd.forward(request, response);

        } else if (acao.equals("ListaContatos")) {

            List<Contato> listaContatos = dao.listar();

            request.setAttribute("lista", listaContatos);

            RequestDispatcher rd =
                    request.getRequestDispatcher("/lista-novo.jsp");
            rd.forward(request, response);

        }

    }
}





package dao;


import java.sql.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class ContatoDAO {

    private Connection connection;

    public ContatoDAO() {

        this.connection = new ConnectionFactory().getConnection();
    }

    public void inserir(Contato contato) {

        String sql = "insert into contatos " +
                "(nome,email,endereco,dataNascimento) " +
                "values (?,?,?,?)";

        PreparedStatement ps = null;
        try {
            ps = connection.prepareStatement(sql);
            ps.setString(1, contato.getNome());
            ps.setString(2, contato.getEmail());
            ps.setString(3, contato.getEndereco());
            Date dataParaGravar = transformarParaDate(contato);
            ps.setDate(4, dataParaGravar);

            ps.execute();

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }finally {
            try {
                ps.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }

    private static Date transformarParaDate(Contato contato) {
        return Date.valueOf(contato.getDataNascimento());
    }

    public List<Contato> listar() {
        PreparedStatement preparedStatement = null;
        try {
            preparedStatement = connection.prepareStatement("select * from contatos");
            ResultSet resultSet = preparedStatement.executeQuery();

            List<Contato> contatos = new ArrayList<>();
            while (resultSet.next()) {
                long id = resultSet.getInt(1);
                String nome = resultSet.getString(2);
                String email = resultSet.getString(3);
                String endereco = resultSet.getString(4);
                String dataNascimento = resultSet.getString(5);

                Contato contato = new Contato();
                contato.setNome(nome);
                contato.setEmail(email);
                contato.setEndereco(endereco);
                contato.setId(id);
                DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE;

                contato.setDataNascimento(LocalDate.parse(dataNascimento, formatter));


                contatos.add(contato);
            }
            return contatos;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void atualizar(Contato contato) {

    }

    public void remover(Contato contato) {

    }
}